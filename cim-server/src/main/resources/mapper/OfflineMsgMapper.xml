<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.crossoverjie.cim.server.mapper.OfflineMsgMapper">

    <insert id="insert" parameterType="com.crossoverjie.cim.server.pojo.OfflineMsg">
        INSERT INTO offline_msg (message_id,
                                 user_id,
                                 content,
                                 message_type,
                                 status,
                                 created_at,
                                 properties)
        VALUES (#{messageId},
                #{userId},
                #{content},
                #{messageType},
                #{status},
                #{createdAt},
                #{propertiesJson})
    </insert>

    <insert id="insertBatch" parameterType="java.util.List">
        INSERT INTO offline_msg (
        message_id,
        user_id,
        content,
        message_type,
        status,
        created_at,
        properties
        ) VALUES
        <foreach collection="list" item="item" separator=",">
            (
            #{item.messageId},
            #{item.userId},
            #{item.content},
            #{item.messageType},
            #{item.status},
            #{item.createdAt},
            #{item.propertiesJson}
            )
        </foreach>
    </insert>

    <select id="fetchOfflineMsgsWithCursor" resultType="com.crossoverjie.cim.server.pojo.OfflineMsg">
        SELECT
        message_id,
        user_id,
        content,
        message_type,
        status,
        created_at,
        properties
        FROM offline_msg
        WHERE user_id = #{userId}
        AND message_id &gt; (select last_message_id from offline_msg_last_send_record where user_id = #{userId})
        ORDER BY message_id ASC
        LIMIT #{limit}
    </select>

    <select id="fetchOfflineMsgIdsWithCursor" resultType="java.lang.Long" parameterType="java.lang.Long">
        SELECT
        message_id
        FROM offline_msg
        WHERE user_id = #{userId}
        AND message_id &gt; (select last_message_id from offline_msg_last_send_record where user_id = #{userId})
        ORDER BY message_id ASC
    </select>

    <update id="updateStatus" parameterType="map">
        UPDATE offline_message
        SET status = 1
        WHERE user_id = #{userId}
        AND message_id IN
        <foreach item="id" collection="messageIds" open="(" separator="," close=")">
            #{id}
        </foreach>
    </update>
</mapper>

